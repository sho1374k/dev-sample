---
import Layout from "../../layouts/Layout.astro";

/*
【リファレンス: Yotube > IFrame Player API】
- https://developers.google.com/youtube/player_parameters?hl=ja

*/
---
<Layout title="Page">
	<!-- <iframe src="https://www.youtube.com/embed/lqPCHdJhhv0?si=OGNglNdFZrilQB18" allowfullscreen></iframe>
	<iframe src="https://www.youtube.com/embed/vr9dLvJs7VE?si=m-jgfco5uI2x4wrA" allowfullscreen></iframe>
	<iframe src="https://www.youtube.com/embed/fYX_wS8bf3E?si=V1SwkNRUfp1_Bhse" allowfullscreen></iframe> -->
	<!-- <iframe src="https://www.youtube.com/embed/lqPCHdJhhv0" allowfullscreen></iframe>
	<iframe src="https://www.youtube.com/embed/vr9dLvJs7VE" allowfullscreen></iframe>
	<iframe src="https://www.youtube.com/embed/fYX_wS8bf3E" allowfullscreen></iframe> -->

	<!-- <iframe src="https://www.youtube.com/embed/lqPCHdJhhv0" allowfullscreen></iframe> -->

	<ul>
		<li class="jsTarget">1</li>
		<li class="jsTarget">2</li>
		<li class="jsTarget">3</li>
	</ul>
	<div class="youtube" id="youtube"></div>
</Layout>

<style lang="scss">
	@use "../../styles/global/app" as *;
	:root {
		--dummy-black: #222;
		--dummy-baige: #f9f2e5;
	}
	body {
		background: var(--black2);
		min-height: 100vh;
	}
	ul{
		display: flex;
		gap: 10px;
		padding: 10px;
	}
	.jsTarget{
		cursor: pointer;
		width: 100px;
		height: 100px;
		background: red;
		color: #fff;
		font-size: 16px;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	.youtube{
		width: 300px;
		height: 300px;
		background: pink;
	}
</style>

<script lang="javascript">
	/*
	インライン再生: playsinline=1
	関連動画を出さないようにloopを設定する: loop=1
	*/

	const SITE_URL = import.meta.env.SITE;
	const JSON_URL = SITE_URL + "assets/json/youtube.json"

	class Youtube {
		constructor(){
			this.data = null;
			this.player = null;

			this.isOnced = false;
			this.createScript();
		}

		load(){
			return new Promise((resolve) => {
				fetch(JSON_URL)
				.then(_data => {
					return _data.json();
				})
				.then(async(_data) => {
					this.data = _data;
					await this.readyYoutube();
					resolve()
				})
				.catch(error => {
					resolve();
					throw new Error(error)
				})
			})
		}

		readyYoutube(){
			return new Promise(resolve => {
				window.onYouTubeIframeAPIReady = () => {
					this.player = new YT.Player('youtube', {
						videoId: this.data[0].videoId,
						playerVars: {
							fs: 0, // 0: 全画面表示ボタンはプレーヤーに表示されなくなります
							mute: 0,
							iv_load_policy: 3, // 3: 動画アノテーションを非表示
							loop: 0,
							rel: 0,
							showinfo: 0, // 2018年にサポート対象外に
							controls: 0,
							modestbranding: 1, // 1: YouTube プレーヤーに YouTube ロゴが表示されないようにすることができます
							playsinline: 1,
						}
					});
					resolve();
				}
			})
		}

		createScript(){
			const tag =  document.createElement('script');
			tag.src = "https://www.youtube.com/player_api";
			const firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
		}


		play(_videoId, _seekTime) {
			if (this.player != null) this.player.loadVideoById(_videoId, _seekTime);
		}

		init(){
			this.targetElementList = [...document.querySelectorAll(".jsTarget")];
			for (let i = 0; i < this.targetElementList.length; i++) {
				const target = this.targetElementList[i];
				target.addEventListener('click', e => {
					this.play(this.data[i].videoId, 0);
				});
			}
		}
	}

  window.addEventListener("DOMContentLoaded", async(e) => {
		const app = new Youtube()
		await app.load();
		app.init();
  });
</script>
